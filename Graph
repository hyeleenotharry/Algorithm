/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>

//인접 정점-연결리스트
typedef struct AdjVertex
{
    char aName;
    int weight; //가중치
    struct AdjVertex* next;
}AdjVertex;

//정점-연결리스트
typedef struct Vertex
{
    char vName;
    AdjVertex* aHead; //각각의 정점이 자신만의 인접 정점 관리
    struct Vertex* next;
}Vertex;

//실제 그래프, 그래프 헤드
typedef struct
{
    Vertex* vHead;
    int vCount;//추가하는 개수가 정점의 개수 -1(정점의 개수)
}Graph;

void init(Graph* G){
    G->vHead = NULL;
    G->vCount = 0;
}

void makeVertex(Graph* G, char vName){
    Vertex* v = (Vertex*)malloc(sizeof(Vertex));
    v->vName = vName;
    v->aHead = NULL;
    v->next = NULL;
    
    G->vCount++;
    
    Vertex *p = G->vHead;
    if(p == NULL) //그래프가 비어있으면
        G->vHead = v;
    else{
        while(p->next != NULL)
            p = p->next;
        p->next = v;
    }
}

void makeAdjVertex(Vertex* v, char aName, int w)
{
    AdjVertex* a = (AdjVertex*)malloc(sizeof(AdjVertex));
    a->aName = aName;
    a->weight = w;
    a->next = NULL;
    
    AdjVertex* p = v->aHead;
    if(p == NULL)
        v->aHead = a;
    else
    {
        while(p->next != NULL)
            p = p->next;
        p->next = a;
    }
}

Vertex* findVertex(Graph *G, char vName)
{
    Vertex* v = G->vHead;
    while(v->vName != vName)
        v = v->next;
        
    return v;
}

void print(Graph* G){
    Vertex* p;
    AdjVertex* q;
    
    for(p = G->vHead; p != NULL; p=p->next){
        printf("[%c] : ", p->vName);
        for(q = p->aHead; q != NULL; q = q->next)
            printf("[%c : %2d]", q->aName, q->weight);
        printf("\n");
    }
    printf("\n");
}

void insertEdge(Graph *G, char v1, char v2, int w)
{
    Vertex* v = findVertex(G, v1);
    makeAdjVertex(v, v2, w); //인접정점과 가중치 
    v = findVertex(G, v2);
    makeAdjVertex(v, v1, w); //인접정점과 가중치 
}

int main()
{
    Graph G;
    init(&G);
    
    makeVertex(&G, 'a'); makeVertex(&G, 'b'); makeVertex(&G, 'c'); makeVertex(&G, 'd'); makeVertex(&G, 'e');
    makeVertex(&G, 'f'); makeVertex(&G, 'g'); makeVertex(&G, 'h'); makeVertex(&G, 'i'); 
    
    insertEdge(&G, 'a', 'b', 4); insertEdge(&G, 'a', 'h', 8); insertEdge(&G, 'b', 'c', 8); insertEdge(&G, 'b', 'h', 11);
    insertEdge(&G, 'c', 'd', 7); insertEdge(&G, 'c', 'f', 4); insertEdge(&G, 'g', 'i', 6); insertEdge(&G, 'h', 'i', 7);
    insertEdge(&G, 'c', 'i', 2); insertEdge(&G, 'd', 'e', 9); insertEdge(&G, 'd', 'f', 14); insertEdge(&G, 'e', 'f', 10);
    insertEdge(&G, 'f', 'g', 2); insertEdge(&G, 'g', 'h', 1);
    
    print(&G);
    
    return 0;
}

