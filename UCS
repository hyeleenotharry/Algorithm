from collections import deque
import heapq

node = ['S', 'A', 'B', 'D', 'E', 'G', 'C']

visited = []

graphA = [
    [0, 2, 3, -1, -1, -1, -1],
    [-1, 0, -1, 4, -1, -1, -1],
    [-1, -1, 0, 5, 1, -1, -1],
    [-1, -1, -1, 0, -1, 7, -1],
    [-1, -1, -1, 3, 0, 4, -1],
    [-1. -1, -1, -1, -1, 0, -1],
    [1, -1, -1, -1, 1, -1, 0]
    
]

q = []


def ucs(start):
    final_cost = 0
    start_index = node.index(start)
    # visited.append(start)  # already visited
    heapq.heappush(q, (0, start_index))  # (cost, start_index)
    
    while q:
        
        n = heapq.heappop(q)
       
        if node[n[1]] not in visited:
            visited.append(node[n[1]])
        # print(q)
        if node[n[1]] == 'G':
            
            final_cost = n[0]
            break
        
        for adj in graphA[n[1]]:
            adj_index = graphA[n[1]].index(adj) # node
            
            if adj != 0 and adj != -1 and node[adj_index] not in visited:
                heapq.heappush(q, (n[0] + adj, adj_index)) # (node, previous cost + cost)
                
                # visited.append(node[adj_index])
                
                
    return (visited, final_cost)
    
print(ucs('S'))



                
                
        
