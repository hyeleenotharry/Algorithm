from collections import deque
import heapq

node = ['S', 'A', 'B', 'D', 'E', 'G', 'C']

visited = []

graphA = [
    [0, 2, 3, -1, -1, -1, -1],
    [-1, 0, -1, 4, -1, -1, -1],
    [-1, -1, 0, 5, 1, -1, -1],
    [-1, -1, -1, 0, -1, 7, -1],
    [-1, -1, -1, 3, 0, 4, -1],
    [-1. -1, -1, -1, -1, 0, -1],
    [1, -1, -1, -1, 1, -1, 0]
    
]

heuristic = {'S': 8, 'A': 6, 'B': 5, 'C': 6, 'D': 2, 'E': 3, 'G': 0} # hearistic cost

q = []


def Astar(start):
    final_cost = 0
    start_index = node.index(start)
    # visited.append(start)  # already visited
    
    heapq.heappush(q, (heuristic[start], 0, 0))  # (heuristic, cost, start_index)
    
    while q:
        
        n = heapq.heappop(q)
       
        if node[n[2]] not in visited:
            visited.append(node[n[2]])
        
        if node[n[2]] == 'G':
            
            final_cost = n[1]
            break
        
        for adj in graphA[n[2]]:
            adj_index = graphA[n[2]].index(adj) # node
            
            if adj != 0 and adj != -1 and node[adj_index] not in visited:
                
                heapq.heappush(q, (n[1] + adj + heuristic[node[adj_index]], n[1] + adj, adj_index)) # (previous cost + heuristic, previous cost + cost, node)
                
                # visited.append(node[adj_index])
            
                
    return (visited, final_cost)
    
print(Astar('S'))



                
                
        
